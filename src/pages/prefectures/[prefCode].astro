---
// ルーティング
export async function getStaticPaths() {
  const response = await fetch(
    "https://opendata.resas-portal.go.jp/api/v1/prefectures",
    {
      headers: { "X-API-KEY": import.meta.env.RESAS_API_KEY as string },
    }
  );
  const prefectures = await response.json();

  return prefectures.result.map((prefecture) => ({
    params: { prefCode: prefecture.prefCode.toString() },
    props: { prefecture },
  }));
}
const { prefecture } = Astro.props;

// 人口データ取得
async function fetchPopulationPerYear(prefCode) {
  const response = await fetch(
    `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=${prefCode}`,
    {
      headers: { "X-API-KEY": import.meta.env.RESAS_API_KEY as string },
    }
  );
  const data = await response.json();
  return data.result;
}
const populations = await fetchPopulationPerYear(prefecture.prefCode);

const years = populations.data.map((population) => {
  if (population.label === "総人口") {
    return population.data.map((populationData) => {
      return populationData.year;
    });
  }
  return null;
});
const flatYears = years.flat().filter((year) => year !== null);
console.log(JSON.stringify(flatYears));

const values = populations.data.map((population) => {
  if (population.label === "総人口") {
    return population.data.map((populationData) => {
      return populationData.value;
    });
  }
  return null;
});
const flatValues = values.flat().filter((value) => value !== null);
console.log(JSON.stringify(flatValues));
---

<script>
  import * as echarts from "echarts";

  const main = document.getElementById("main");
  const flatYears = main.dataset.flatYears.split(",");
  const flatValues = main.dataset.flatValues.split(",");
  // console.log(main.dataset.flatYears);
  console.log(flatYears);
  console.log(flatValues);
  // チャート
  var myChart = echarts.init(main);
  myChart.setOption({
    title: {
      text: "ECharts Getting Started Example",
    },
    tooltip: {},
    xAxis: {
      // data: ["shirt", "cardigan", "chiffon", "pants", "heels", "socks"],
      // data: [
      //   1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015,
      //   2020, 2025, 2030, 2035, 2040, 2045,
      // ],
      data: flatYears,
    },
    yAxis: {},
    series: [
      {
        name: "sales",
        type: "bar",
        // data: [5, 20, 36, 10, 10, 20],
        // data: [
        //   1448517, 1411118, 1371383, 1385563, 1421927, 1433611, 1416928,
        //   1419505, 1416180, 1385041, 1330147, 1279594, 1210534, 1161638,
        //   1096141, 1028673, 957788, 884518,
        // ],
        data: flatValues,
      },
    ],
  });
</script>

<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Document</title>
  </head>
  <body>
    <p>{prefecture.prefName}</p>
    <p>{populations.boundaryYear}</p>
    <ul>
      {
        populations.data.map((population) => (
          <li>
            {population.label}
            {population.label === "総人口" &&
              population.data.map((populationData) => (
                <span>
                  {/* {populationData.year}
                  {populationData.value} */}
                  {/* {JSON.stringify(flatYears)}
                  {JSON.stringify(flatValues)} */}
                </span>
              ))}
          </li>
        ))
      }
    </ul>
    <div
      id="main"
      class:list={["w-[1200px]", "h-[600px]"]}
      data-flat-years={flatYears}
      data-flat-values={flatValues}
    >
    </div>
    <!-- <p>
      {JSON.stringify(flatYears)}
      {JSON.stringify(flatValues)}
    </p> -->
  </body>
</html>
